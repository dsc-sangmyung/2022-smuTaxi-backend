// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: room.sql

package db

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const addMember = `-- name: AddMember :one
UPDATE room
SET member = array_append(member, $2)
WHERE room_id = $1
RETURNING room_id, source, destination, member, date, time, is_full
`

type AddMemberParams struct {
	RoomID      int64       `json:"room_id"`
	ArrayAppend interface{} `json:"array_append"`
}

func (q *Queries) AddMember(ctx context.Context, arg AddMemberParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, addMember, arg.RoomID, arg.ArrayAppend)
	var i Room
	err := row.Scan(
		&i.RoomID,
		&i.Source,
		&i.Destination,
		pq.Array(&i.Member),
		&i.Date,
		&i.Time,
		&i.IsFull,
	)
	return i, err
}

const createRoom = `-- name: CreateRoom :one
INSERT INTO room (
    source,
    destination,
    date,
    time
) VALUES (
    $1, $2, $3, $4
) RETURNING room_id, source, destination, member, date, time, is_full
`

type CreateRoomParams struct {
	Source      string    `json:"source"`
	Destination string    `json:"destination"`
	Date        time.Time `json:"date"`
	Time        time.Time `json:"time"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, createRoom,
		arg.Source,
		arg.Destination,
		arg.Date,
		arg.Time,
	)
	var i Room
	err := row.Scan(
		&i.RoomID,
		&i.Source,
		&i.Destination,
		pq.Array(&i.Member),
		&i.Date,
		&i.Time,
		&i.IsFull,
	)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM room
WHERE room_id = $1
`

func (q *Queries) DeleteRoom(ctx context.Context, roomID int64) error {
	_, err := q.db.ExecContext(ctx, deleteRoom, roomID)
	return err
}

const findRooms = `-- name: FindRooms :many
SELECT room_id, source, destination, member, date, time, is_full FROM room
WHERE source = $1 AND destination = $2 AND date = $3 AND time = $4
`

type FindRoomsParams struct {
	Source      string    `json:"source"`
	Destination string    `json:"destination"`
	Date        time.Time `json:"date"`
	Time        time.Time `json:"time"`
}

func (q *Queries) FindRooms(ctx context.Context, arg FindRoomsParams) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, findRooms,
		arg.Source,
		arg.Destination,
		arg.Date,
		arg.Time,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Room{}
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.RoomID,
			&i.Source,
			&i.Destination,
			pq.Array(&i.Member),
			&i.Date,
			&i.Time,
			&i.IsFull,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoom = `-- name: GetRoom :one
SELECT room_id, source, destination, member, date, time, is_full FROM room
WHERE room_id = $1 LIMIT 1
`

func (q *Queries) GetRoom(ctx context.Context, roomID int64) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoom, roomID)
	var i Room
	err := row.Scan(
		&i.RoomID,
		&i.Source,
		&i.Destination,
		pq.Array(&i.Member),
		&i.Date,
		&i.Time,
		&i.IsFull,
	)
	return i, err
}

const getRooms = `-- name: GetRooms :many
SELECT room_id, source, destination, member, date, time, is_full FROM room
`

func (q *Queries) GetRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, getRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Room{}
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.RoomID,
			&i.Source,
			&i.Destination,
			pq.Array(&i.Member),
			&i.Date,
			&i.Time,
			&i.IsFull,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodayRoom = `-- name: ListTodayRoom :many
SELECT room_id, source, destination, member, date, time, is_full FROM room
WHERE date = CURRENT_DATE
`

func (q *Queries) ListTodayRoom(ctx context.Context) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, listTodayRoom)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Room{}
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.RoomID,
			&i.Source,
			&i.Destination,
			pq.Array(&i.Member),
			&i.Date,
			&i.Time,
			&i.IsFull,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeMember = `-- name: RemoveMember :exec
UPDATE room
SET member = array_remove(member, $2)
WHERE room_id = $1
`

type RemoveMemberParams struct {
	RoomID      int64       `json:"room_id"`
	ArrayRemove interface{} `json:"array_remove"`
}

func (q *Queries) RemoveMember(ctx context.Context, arg RemoveMemberParams) error {
	_, err := q.db.ExecContext(ctx, removeMember, arg.RoomID, arg.ArrayRemove)
	return err
}
